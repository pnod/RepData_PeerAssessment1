qplot(wind, ozone, data=airquality, facets=.~factor(Month))
qplot(Wind, Ozone, data=airquality, facets=.~factor(Month))
qplot(Wind, Ozone, data=airquality)
qplot(Wind, Ozone, data=airquality, geom="smooth")
qplot(Wind, Ozone, data=airquality, facets= .~factor(Month))
airquality=transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data=airquality, facets= .~Month
)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies) + geom_smooth()
install.packages("RMySQL", type="source")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
library("RMySQL")
library()
library(RMySQL)
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb)
result
head(result)
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
str(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10);
dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
biocLite("rhdf5")
library(rhdf5)
biocLite("rhdf5")
library(rhdf5)
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLite("rhdf5")
library(rhdf5)
install.packages("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
library()
library(rhdf5)
con=url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
hmtlCode
?t.test
?qt
error <- qt(0.975, df=8)*30(sqrt(9))
e <- qt(0.975, df=8)*30(sqrt(9))
e <- qt(p=0.975, df=8)*30/sqrt(9)
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y<-rnorm(12, mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05, labels=as.character(1:12))
dataFrame <- data.frame(x=x, y=y)
dist(dataFrame)
dist(dataFrame)
?hclust
hClustering <- hclust(distxy)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
myplclust(hClustering, lab=rep(1:3, each=4), lab.col=rep(1:3, each=4))
dataFrame <- data.frame(x=x, y=y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame) [sample(1:12)]
dataMatrix <- as.matrix(dataFrame) [sample(1:12), ]
heatmap(dataMatrix)
plot(x,y,col="blue",pch=19,cex=2)
dataFrame <- data.frame(x,y)
kmeansObj <-kmeans(dataFrame, centers=3)
plot(x,y,col=kmeansObj$cluster,pch=19, cex=2)
points(kmeansObj$centers, col=1:3, pch=3, cex=3, lwd=3)
set.seed(12345)
par(mar=rep(0.2,4))
dataMatrix <- matrix(rnorm(400), nrow=40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {}
for (i in 1:40) {
coinflip <- rbinom(1, size=1, prob=0.5)
if (coinflip) {
dataMatrix[i,] <- dataMatrix[i, ] + rep(c(0,3), each=5)
}
}
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
install.packages("grDevices")
library(grDevices)
pal <- colorRamp(c("red", "blue"))
pal(0)
?grep
dbinom(2, size=3, p=0.51)
pnorm(34, mean=24, sd=4)
pnorm(50, mean=44.8, sd=5.679)
sum(dbinom(1:10, size=10, p=0.07))
pnorm(35, mean=30, sd=5.477)
?gl
?quartz
?xmlRoot
library(XML)
?xmlRoot
?xmlName
?xmlValue
library(mysql)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
library(Rmysql)
install.packages(RMySQL)
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, “show databases;”)
result <- dbGetQuery(ucscDb, "show databases;")
dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
dbDisconnect(hg19)
head(allTables)
rm(result)
rm(hg19)
rm(allTables)
rm(ucscDb)
library(rhdf5)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created <- h5createFile("example.h5")
created
install.packages(httr)
install.packages("httr")
library(httr)
?oauth_app
myapp <- oauth_app("github", "0673d880710ee8bca36c", "241d769cbf566d1282fb4088ee5b76206103fb63")
str(myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token=github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
str(gtoken)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
str(req)
?stop_for_status
content(req)
?fromJSON
library(jsonlite)
a <- frmoJSON(toJSON(req))
a <- fromJSON(toJSON(req))
?fromJSON
a <- fromJSON(toJSON(content(req)))
str(a)
head(a)
str(a)
stop_for_status(req)
a <- fromJSON(toJSON(content(req)))
str(a)
page(a)
page(str(a))
names(a)
names(a$created_at)
names("a$created_at")
names(a$id)
?names
created <- fromJSON(a$created_at)
content(req)
d <- toJSON(content(req))
str(d)
names(d)
d <- fromJSON(d)
str(d)
rm(d)
names(a)
names(a$url)
head(a$url)
head(a$created_at)
rm(a)
?which
?any
?all
?sub
?grep
?substr
?nchars
?nchar
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(nlme)
?xyplot
?axis
?text
?lpoints
library(datasets)
data(airquality)
str(airquality)
xyplot(Ozone ~ Wind | factor(Month), data=airquality)
?splom
?trellis.par.set
library(ggplot2)
qplot(Wind, Ozone, data=airquality, facets= .~factor(Month))
airquality=transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data=airquality, facets = .~Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(knitr)
setwd("C:/Users/David/Desktop/Courses/Statistics/R/Coursera - Reproducible research/Assignment 1/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
activity$date <- as.Date(activity$date, format="%Y-%m-%d")
hist(activity$steps)
mean(activity$steps, na.rm=TRUE)
median(activity$steps, na.rm=TRUE)
str(activity)
table(activity$interval)
test <- tapply(activity$steps, activity$interval, mean)
str(test)
table(test)
test <- tapply(activity$steps, activity$interval, mean, na.RM=TRUE)
str(test)
test
test <- tapply(activity$steps, as.numeric(activity$interval), mean, na.RM=TRUE)
str(activity)
test <- tapply(activity$steps, as.factor(activity$interval), mean, na.RM=TRUE)
test
mean(activity$steps[activity$interval==2355], na.rm=TRUE)
test <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
test
byinterval <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
rm(test)
plot(byinterval)
names(byinterval)
plot(byinterval, names(byinterval), type="l")
plot(names(byinterval), byinterval, type="l")
?max
max(byinterval)
which(max(byinterval))
?which
nrow(max(byinterval))
?max
?which.max
which.max(byinterval)
byinterval[835]
byinterval[104]
names(which.max(byinterval))
byinterval[104]
table(byinterval)
?sort
ness <- sort(byinterval)
head(ness)
tail(ness)
rm(ness)
?is.na
is.na(activity$steps)
sum(c("TRUE", "FALSE", "FALSE"))
sum(c(TRUE, FALSE, FALSE))
sum(C(TRUE, TRUE, FALSE))
sum(c(TRUE, TRUE, FALSE))
sum(is.na(activity$steps))
?length
test <- activity[activity$steps==1,]
test <- activity[activity$steps==NA,]
test <- activity[activity$steps=="NA",]
activity1 <- activity
str(activity1)
mean(activity1$steps, na.rm=TRUE)
mean(activity$steps, na.rm=TRUE)
activity1[activity1$steps=="NA",] <- byinterval[activity1$interval]
activity1[activity1$steps=="NA", steps] <- byinterval[activity1$interval]
activity1[activity1$steps=="NA", activity$steps] <- byinterval[activity1$interval]
activity1[activity1$steps==NA, activity$steps] <- byinterval[activity1$interval]
activity1index <- activity1$steps=="NA"
table(activity1index)
activity1index <- is.na(activity1$steps)
table(activity1index)
activity1[activity1index==TRUE, activity1$steps] <- byinterval[activity1$interval]
activity1[activity1index==TRUE, 1] <- byinterval[activity1$interval]
rm(test)
length(table(activity$date))
length(table(activity$interval))
byday <- tapply(activity$steps, activity$date, mean, na.rm=TRUE)
head(byday)
activity[activity$date,]
activity[activity$data=="2012-10-01"]
activity[activity$date=="2012-10-01",]
table(byday)
names(byday)
table(byday)
byday
hist(byday)
?mean
mean(byday)
mean(byday, na.rm=TRUE)
?merge
str(byinterval)
for(i in 1:length(activity1)) {
if(is.na(activity1$steps)) {
activity1$steps[i] <- byinterval[activity1$interval==names(byinterval)]
}
}
length(activity1)
?length
for(i in 1:length(activity1$steps)) {
if(is.na(activity1$steps)) {
activity1$steps[i] <- byinterval[activity1$interval==names(byinterval)]
}
}
warnings()
activity1 <- activity
for(i in 1:length(activity1$steps)) {
if(is.na(activity1$steps[i])) {
activity1$steps[i] <- byinterval[activity1$interval==names(byinterval)]
}
}
activity1 <- activity
for(i in 1:length(activity1$steps)) {
if(is.na(activity1$steps[i])) {
activity1$steps[i] <- byinterval[activity1$interval[i]==names(byinterval[i])]
}
}
warnings()
str(activity1$interval)
?as.char
?as.Char
test <- as.character(activity1$interval)
head test
head(test)
tail(test)
head(names(byinterval))
tail(names(byinterval))
activity1 <- activity
for(i in 1:length(activity1$steps)) {
if(is.na(activity1$steps[i])) {
activity1$steps[i] <- byinterval[as.character(activity1$interval[i])==names(byinterval[i])]
}
}
warnings()
byinterval["0"]
names(byinterval[i])
names(byinterval["0"])
activity1 <- activity
for(i in 1:length(activity1$steps)) {
if(is.na(activity1$steps[i])) {
activity1$steps[i] <- byinterval[as.character(activity1$interval[i])]
}
}
rm(test)
table(activity1$steps)
length(is.na(activity1$steps))
table(is.na(activity1$steps))
hist(byday)
str(byday)
names(byday)
hist(byday, xlab=names(byday))
hist(byday, xaxt="n")
axis(side=1, labels=names(byday))
axis(side=1, at=byday, labels=names(byday))
hist(byday, breaks=byday)
hist(byday, breaks=length(bydya))
hist(byday, breaks=length(byday))
hist(byday)
length(byday)
hist(byday, breaks=length(byday))
hist(byday, breaks=(length(byday)/2))
hist(byday)
hist(byday, breaks=20)
byday1 <- tapply(activity1$steps, activity1$date, mean, na.rm=TRUE)
hist(byday1, breaks=20)
mean(byday1, na.rm=TRUE)
median(byday1, na.rm=TRUE)
mean(byday, na.rm=TRUE)
median(byday, na.rm=TRUE)
?weekdays
weekday(activity1$date[1])
weekdays(activity1$date[1])
class(weekdays(activity1$date[1]))
?if
?if
?ifelse
for(i in 1:length(activity1$date)) {
if weekdays(activity1$date[i]) %in% (c("Saturday", "Sunday")) {
activity1$weekday[i] <- FALSE; activity1$weekend[i] <- TRUE
}
else {
activity1$weekday[i] <- TRUE; activity1$weekend[i] <- FALSE
}
}
for(i in 1:length(activity1$date)) {
if(weekdays(activity1$date[i]) %in% (c("Saturday", "Sunday"))) {
activity1$weekday[i] <- FALSE; activity1$weekend[i] <- TRUE
}
else {
activity1$weekday[i] <- TRUE; activity1$weekend[i] <- FALSE
}
}
table(activity1$weekday, activity1$weekend)
activity1 <- activity
for(i in 1:length(activity1$steps)) {
if(is.na(activity1$steps[i])) {
activity1$steps[i] <- byinterval[as.character(activity1$interval[i])]
}
}
byday1 <- tapply(activity1$steps, activity1$date, mean, na.rm=TRUE)
hist(byday1, breaks=20)
mean(byday1, na.rm=TRUE)
median(byday1, na.rm=TRUE)
for(i in 1:length(activity1$date)) {
if(weekdays(activity1$date[i]) %in% (c("Saturday", "Sunday")))
activity1$weekend[i] <- TRUE
else
activity1$weekend[i] <- FALSE
}
table(activity1$weekend)
table(weekdays(activity1$date))
library(lattice)
byinterval1 <- tapply(activity1$steps, activity1$interval, mean, na.rm=TRUE)
summary(byinterval1)
str(byinterval1)
byweekend <- tapply(activity1$steps, activity1$weekend, mean, na.rm=TRUE)
str(byweekend)
head(byweekend)
for(i in 1:length(activity1$date)) {
if(weekdays(activity1$date[i]) %in% (c("Saturday", "Sunday")))
activity1$weekend[i] <- "weekend"
else
activity1$weekend[i] <- "weekday"
}
str(activity1$weekend)
byweekend <- tapply(activity1$steps, activity1$weekend, mean, na.rm=TRUE)
str(byweekend)
byinterval1 <- tapply(activity1$steps, activity1$interval, mean, na.rm=TRUE)
str(byinterval1)
for(i in activity1$interval) {
activity1$intavg[i] <- byinterval1[as.character(activity1$interval[i])]
}
for(i in 1:length(activity1$interval)) {
activity1$intavg[i] <- byinterval1[as.character(activity1$interval[i])]
}
str(activity1)
table(activity1$interval, activity1$intavg)
head[activity1$intavg]
head(activity$intavg)
head(activity1$intavg)
byinterval1 <- tapply(activity1$steps, c(activity1$interval, activity1$weekend), mean, na.rm=TRUE)
?tapply
byinterval1 <- tapply(activity1$steps, list(activity1$interval, activity1$weekend), mean, na.rm=TRUE)
str(byinterval1)
head(byinterval1)
class(byinterval1)
?stack
library(reshape)
?melt
install.packages("reshape")
library(reshape)
?melt
test <- melt(byinterval1)
str(test)
head(test)
byinterval1 <- melt(byinterval1)
str(byinterval1)
576/2
names(byinterval1) <- c("interval", "type of day", "average")
head(byinterval1)
names(byinterval1) <- c("interval", "group", "average")
xyplot(average ~ interval | group, data=byinterval1)
xyplot(average ~ interval | group, data=byinterval1, layout=c(1,2), type="l")
?xyplot
xyplot(average ~ interval | group, data=byinterval1, layout=c(1,2), type="l", xlab="Interval", ylab="Number of steps")
?sum
?hist
